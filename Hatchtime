#!/usr/bin/env perl
use strict;
use warnings;

use Mojolicious::Lite;
use Mojo::JSON qw(decode_json encode_json);
use Mojolicious::Plugin::Authentication;

my $clients = {};

my $chickens = {
    alice => {
        x   => 4,
        y   => 3,
        age => 1,
    },
};

my $coop = {
    width       => 640,
    height      => 480,
    num_x_cells => 16,
    num_y_cells => 12,
};

my $seconds_per_tick = 3;

Mojo::IOLoop->recurring( $seconds_per_tick => sub {
    npc_turn();
});

get '/' => sub {
    my $controller = shift;
    $controller->stash( coop => $coop );
    $controller->render( template => 'index' );
};

get '/game.js' => sub {
    my $controller = shift;
    $controller->stash( coop => $coop );
    $controller->render( template => 'game', format => 'js' );
};

websocket '/game' => sub {
    my $controller = shift;

    app->log->debug( sprintf 'Client connected: %s', $controller->tx );
    my $id = sprintf "%s", $controller->tx->connection;
    $clients->{$id} = $controller->tx;
    app->log->debug( 'id: ' . $id );

    # Opened
    $controller->app->log->debug('WebSocket opened');

    # Allow inactivity indefinitely
    $controller->inactivity_timeout(0);

    # Incoming message
    $controller->on(
        message => sub {
            my ( $c, $message ) = @_;
            app->log->debug("incoming: $message");
            if ( my $j = decode_json $message ) {
                app->log->debug( $j->{cmd} );
                do_msg( c => $c, j => $j );
            }
            update_clients();
        }
    );

    # Closed
    $controller->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            $c->app->log->debug("WebSocket closed with status $code");
            delete $clients->{$id};
            update_clients();
        }
    );
};

sub do_msg {
    my (%args) = @_;

    my $c        = $args{c};
    my $json_msg = $args{j};
    my $id = $c->tx->connection;

    given ( $json_msg->{cmd}) {
      when ('AUTHENTICATE') {
        $c->authenticate( $json_msg->{name}, $json_msg->{code} );
      }
      when ('DE_AUTHENTICATE'){
        $c->logout();
        $c->session( expires => 1 );
      }
      when ('MOVE'){
        if ( $c->is_user_authenticated ) {
        }
        else {
        }
      }
      when ('DESTINATION'){
        # set entity's destination
      }
    }

    return;
}

sub update_clients {
    my (%args) = @_;

    for ( keys %$clients ) {
        $clients->{$_}->send(
            {
                json => {
                    chickens => $chickens,
                }
            }
        );
    }

    return;
}

sub npc_turn {
    app->log->debug('TICK');

    for my $chicken ( keys %$chickens ) {
        app->log->debug( "\t"
              . $chicken . ":\t"
              . "location: \t"
              . $chickens->{$chicken}->{x} . "\t"
              . $chickens->{$chicken}->{y} . "\t"
              . "age: \t"
              . $chickens->{$chicken}->{age} );
        move_chicken( chicken => $chicken );
        age_chicken( chicken => $chicken );
        if ( $chickens->{$chicken} ) {
            app->log->debug( "\t"
                  . $chickens->{$chicken}->{x} . "\t"
                  . $chickens->{$chicken}->{y} . "\t"
                  . "age: \t"
                  . $chickens->{$chicken}->{age} );
        }
    }

    update_clients( clients => $clients );
    return;
}

sub move_chicken {
    my (%args) = @_;

    my @moves = ( 'up', 'down', 'left', 'right' );
    my $move_direction   = $moves[rand @moves];
    move_entity(
      entity => \$chickens->{ $args{chicken} },
      direction => $move_direction,
      distance => 1,
    );
    return;
}

sub move_entity {
  my (%args) = @_;

  ${$args{entity}}->{y} -= ( $args{direction} eq 'up') ? $args{distance} : 0;
  ${$args{entity}}->{y} += ( $args{direction} eq 'down') ? $args{distance} : 0;
  ${$args{entity}}->{x} -= ( $args{direction} eq 'left') ? $args{distance} : 0;
  ${$args{entity}}->{x} += ( $args{direction} eq 'right') ? $args{distance} : 0;

  ${$args{entity}}->{y} %= $coop->{num_y_cells};
  ${$args{entity}}->{x} %= $coop->{num_x_cells};

  # calculate new position
  # if new position legal, set pos = new postion
  # else, pos = old pos
  #
  # position is legal if: no other entity is in that position ( besides self )
  # for each entity in the world, is it in new_postion

  return;
}

sub age_chicken {
    my (%args) = @_;
    $chickens->{ $args{chicken} }->{age} += 1;
    if ( $chickens->{ $args{chicken} }->{age} > 111 )
    {
        app->log->debug( "\t" . $args{chicken} . ' died of old age!' );
        delete($chickens->{ $args{chicken} });
    }
    return;
}

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'bawk';
<canvas id='coop' width='<%= $coop->{width} %>' height='<%= $coop->{height} %>'></canvas>
<h1>bawk, bawk</h1>
<p id='connection_status'>not connected</p>
<p id='list'></p>
<script src='game.js'></script>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
